#!/bin/python3

import math
import os
import random
import re
import sys

def unboundedKnapsack(k, arr):
    dp = [0] * (k + 1)
    
    for num in arr:
        for j in range(num, k + 1):
            dp[j] = max(dp[j], dp[j - num] + num)
    
    return dp[k]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for _ in range(t):
        n, k = map(int, input().rstrip().split())
        arr = list(map(int, input().rstrip().split()))

        result = unboundedKnapsack(k, arr)

        fptr.write(str(result) + '\n')

    fptr.close()
